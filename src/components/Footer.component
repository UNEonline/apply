<apex:component >

	<footer>
		<div class="row wrapper">
			<div class="col-md-4">
				<h3>University of New England Online</h3>
				<p>
					716 Stevens Ave.<br />
					Portland, ME 04103<br />
					Phone: (855) 325-0895<br />
					Fax: (207) 221-4847
				</p>
			</div>

			<div class="col-md-4">
				<h3>Office Hours</h3>
				<p>
					Monday-Wednesday 8AM-8PM EST<br />
					Thursday-Friday 8AM-5PM EST
				</p>
			</div>

			<div class="col-md-4">
				<!--h3>Application Issues? Contact Us</h3>
				<form>
                    <div class="form-group">
                        <div class="input-group">
                            <input id="contact-name" type="text" class="form-control" placeholder="Name" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <input type="email" class="form-control" id="contact-email" placeholder="Email" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <input type="textarea" class="form-control" id="contact-message" />
                        </div>
                    </div>
                </form--> 
			</div>
		</div>
	</footer>

	<!-- Pardot code -->
	<script type="text/javascript">
		piAId = '26232';
		piCId = '11454';

		(function() {
			function async_load(){
				var s = document.createElement('script'); s.type = 'text/javascript';
				s.src = ('https:' == document.location.protocol ? 'https://pi' : 'http://cdn') + '.pardot.com/pd.js';
				var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
			}
			if(window.attachEvent) { window.attachEvent('onload', async_load); }
			else { window.addEventListener('load', async_load, false); }
		})();
	</script>
	<!-- end Pardot code -->

	<!-- begin olark code -->
	<script data-cfasync="false" type='text/javascript'>/*<![CDATA[*/window.olark||(function(c){var f=window,d=document,l=f.location.protocol=="https:"?"https:":"http:",z=c.name,r="load";var nt=function(){
		f[z]=function(){
		(a.s=a.s||[]).push(arguments)};var a=f[z]._={
		},q=c.methods.length;while(q--){(function(n){f[z][n]=function(){
		f[z]("call",n,arguments)}})(c.methods[q])}a.l=c.loader;a.i=nt;a.p={
		0:+new Date};a.P=function(u){
		a.p[u]=new Date-a.p[0]};function s(){
		a.P(r);f[z](r)}f.addEventListener?f.addEventListener(r,s,false):f.attachEvent("on"+r,s);var ld=function(){function p(hd){
		hd="head";return["<",hd,"></",hd,"><",i,' onl' + 'oad="var d=',g,";d.getElementsByTagName('head')[0].",j,"(d.",h,"('script')).",k,"='",l,"//",a.l,"'",'"',"></",i,">"].join("")}var i="body",m=d[i];if(!m){
		return setTimeout(ld,100)}a.P(1);var j="appendChild",h="createElement",k="src",n=d[h]("div"),v=n[j](d[h](z)),b=d[h]("iframe"),g="document",e="domain",o;n.style.display="none";m.insertBefore(n,m.firstChild).id=z;b.frameBorder="0";b.id=z+"-loader";if(/MSIE[ ]+6/.test(navigator.userAgent)){
		b.src="javascript:false"}b.allowTransparency="true";v[j](b);try{
		b.contentWindow[g].open()}catch(w){
		c[e]=d[e];o="javascript:var d="+g+".open();d.domain='"+d.domain+"';";b[k]=o+"void(0);"}try{
		var t=b.contentWindow[g];t.write(p());t.close()}catch(x){
		b[k]=o+'d.write("'+p().replace(/"/g,String.fromCharCode(92)+'"')+'");d.close();'}a.P(2)};ld()};nt()})({
		loader: "static.olark.com/jsclient/loader0.js",name:"olark",methods:["configure","extend","declare","identify"]});
		/* custom configuration goes here (www.olark.com/documentation) */
		olark.identify('3205-126-10-6111');/*]]>*/
	</script>
	<!-- end olark code -->

	<!-- assign chats to MSAN group -->
	<script> olark.configure('system.group', '49ec1dbbf326c09b866402643b86e44d'); /*Routes to Applied Nutrition*/ </script>

	<!-- auto responder -->
	<script>
		var delay1 = 30*1000; // 30 seconds
		var delay2 = 210*1000; // 4 minutes
		var replyTimer1 = null;
		var replyTimer2 = null;

		olark('api.chat.onBeginConversation', function() {
		//olark("api.chat.onMessageToOperator", function() {

			// after 30 seconds
			replyTimer1 = setTimeout(function() {
				replyTimer1 = null;
				olark("api.chat.sendMessageToVisitor", {body: "Sorry! I'm a little busy at the moment but will get back to you in just a minute."});
				olark('api.chat.sendNotificationToOperator', { body: 'Automated delay message has been sent to visitor.' });		
			
				// after 4 minutes
				replyTimer2 = setTimeout(function() {
					replyTimer2 = null;
					olark("api.chat.sendMessageToVisitor", {body: "I’m so sorry, but I’m tied up with something at the moment. Please send me an email at owladmissions@une.edu and I will be sure to reply back to you ASAP."});
					olark('api.chat.sendNotificationToOperator', { body: 'Second automated delay message has been sent to visitor.' });
				}, delay2);
			
			}, delay1);
		});

		olark("api.chat.onMessageToVisitor", function() {
			if (replyTimer1 || replyTimer2) {
				clearTimeout(replyTimer1);
				clearTimeout(replyTimer2);
			}
		});
	</script>

	<!-- enforce offline hours -->
	<script>
		// detect if daylight savings time is implemented in user time zone
		var now = new Date();
		var jan = new Date(now.getFullYear(), 0, 1);
		var jul = new Date(now.getFullYear(), 6, 1);
		var stdTimezoneOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
		var offset = now.getTimezoneOffset();

		// calculate East coast time 
		if (offset < stdTimezoneOffset) {
			offsetEST = 4;
		} else {
			offsetEST = 5;
		}
		var hourOfDayInEST = now.getUTCHours() - offsetEST; // UTC time for East coast

		// calculate day of the week   
		var weekday = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
		var day = now.getUTCDay(); // UTC day of the week

		// enforce offline hours
		if ((weekday[day] == 'Saturday') || (weekday[day] == 'Sunday')) {
			olark.configure("system.force_offline", true);
		}
		else if((weekday[day] == 'Monday') || (weekday[day] == 'Tuesday') || (weekday[day] == 'Wednesday')) {
			// 8PM to 8AM
			//if (hourOfDayInEST > 19 || hourOfDayInEST < 8) {
				//olark.configure("system.force_offline", true);
			//}
			
			// 5PM to 8AM
			if (hourOfDayInEST > 16 || hourOfDayInEST < 8) {
				olark.configure("system.force_offline", true);
			}
		}
		else if((weekday[day] == 'Thursday') || (weekday[day] == 'Friday')) {
			// 5PM to 8AM
			if (hourOfDayInEST > 16 || hourOfDayInEST < 8) {
				olark.configure("system.force_offline", true);
			}
		}
	</script>

	<script type="text/javascript">

			j$ = jQuery.noConflict();
			
			j$(".infoForm").submit(function(e) {

			    var ref = j$(this).find("[form-required]");
			    markAsError(ref, e);

			    var startTermBox = j$(".startTermWrapper > span > select");
			    markAsError(startTermBox, e);


			    var checkboxReq = j$(this).find("[form-checkbox-required]");

			    j$(checkboxReq).each(function(){ 
			    	if (!j$(this).is(':checked')) {
				    	if(!j$(this).next().hasClass('required-message')){
				            	j$(this).after('<span class="required-message"><i class="fa fa-asterisk"></i>Required Field</span>');
				        		j$(this).focus();
					            e.preventDefault();
					            return false;
				        } else {
				        	if(j$(this).next().hasClass('required-message'))
				        		j$(this).next().remove();
				        }
			    	}
			    });
			    return true;
			});

			function markAsError(ref, e){

				j$(ref).each(function(){
			        if ( j$(this).val() == '' || j$(this).val() == '--None--') {
			        	if(!j$(this).next().hasClass('required-message'))
			            	j$(this).after('<span class="required-message"><i class="fa fa-asterisk"></i>This is a required field</span>');
			        } else {
			        	if(j$(this).next().hasClass('required-message'))
			        		j$(this).next().remove();
			        }
			    });  

			    j$(ref).each(function(){
			        if ( j$(this).val() == '' || j$(this).val() == '--None--')
			        {
			            j$(this).focus();
			            e.preventDefault();
			            return false;
			        }
			    });

			}
	</script>

	<!-- bootstrap responsive tabs -->
	<script>
	var fakewaffle = ( function ( $, fakewaffle ) {
		'use strict';

		fakewaffle.responsiveTabs = function ( collapseDisplayed ) {

			fakewaffle.currentPosition = 'tabs';

			var tabGroups = $( '.nav-tabs.responsive' );
			var hidden    = '';
			var visible   = '';
			var activeTab = '';

			if ( collapseDisplayed === undefined ) {
				collapseDisplayed = [ 'xs', 'sm' ];
			}

			$.each( collapseDisplayed, function () {
				hidden  += ' hidden-' + this;
				visible += ' visible-' + this;
			} );

			$.each( tabGroups, function ( index ) {
				var collapseDiv;
				var $tabGroup = $( this );
				var tabs      = $tabGroup.find( 'li a' );

				if ( $tabGroup.attr( 'id' ) === undefined ) {
					$tabGroup.attr( 'id', 'tabs-' + index );
				}

				collapseDiv = $( '<div></div>', {
					'class' : 'panel-group responsive' + visible,
					'id'    : 'collapse-' + $tabGroup.attr( 'id' )
				} );

				$.each( tabs, function () {
					var $this          = $( this );
					var oldLinkClass   = $this.attr( 'class' ) === undefined ? '' : $this.attr( 'class' );
					var newLinkClass   = 'accordion-toggle';
					var oldParentClass = $this.parent().attr( 'class' ) === undefined ? '' : $this.parent().attr( 'class' );
					var newParentClass = 'panel panel-default';
					var newHash        = $this.get( 0 ).hash.replace( '#', 'collapse-' );

					if ( oldLinkClass.length > 0 ) {
						newLinkClass += ' ' + oldLinkClass;
					}

					if ( oldParentClass.length > 0 ) {
						oldParentClass = oldParentClass.replace( /\bactive\b/g, '' );
						newParentClass += ' ' + oldParentClass;
						newParentClass = newParentClass.replace( /\s{2,}/g, ' ' );
						newParentClass = newParentClass.replace( /^\s+|\s+$/g, '' );
					}

					if ( $this.parent().hasClass( 'active' ) ) {
						activeTab = '#' + newHash;
					}

					collapseDiv.append(
						$( '<div>' ).attr( 'class', newParentClass ).html(
							$( '<div>' ).attr( 'class', 'panel-heading' ).html(
								$( '<h4>' ).attr( 'class', 'panel-title' ).html(
									$( '<a>', {
										'class'       : newLinkClass,
										'data-toggle' : 'collapse',
										'data-parent' : '#collapse-' + $tabGroup.attr( 'id' ),
										'href'        : '#' + newHash,
										'html'        : $this.html()
									} )
								)
							)
						).append(
							$( '<div>', {
								'id'    : newHash,
								'class' : 'panel-collapse collapse'
							} )
						)
					);
				} );

				$tabGroup.next().after( collapseDiv );
				$tabGroup.addClass( hidden );
				$( '.tab-content.responsive' ).addClass( hidden );

				if ( activeTab ) {
					$( activeTab ).collapse( 'show' );
				}
			} );

			fakewaffle.checkResize();
			fakewaffle.bindTabToCollapse();
		};

		fakewaffle.checkResize = function () {

			if ( $( '.panel-group.responsive' ).is( ':visible' ) === true && fakewaffle.currentPosition === 'tabs' ) {
				fakewaffle.tabToPanel();
				fakewaffle.currentPosition = 'panel';
			} else if ( $( '.panel-group.responsive' ).is( ':visible' ) === false && fakewaffle.currentPosition === 'panel' ) {
				fakewaffle.panelToTab();
				fakewaffle.currentPosition = 'tabs';
			}

		};

		fakewaffle.tabToPanel = function () {

			var tabGroups = $( '.nav-tabs.responsive' );

			$.each( tabGroups, function ( index, tabGroup ) {

				// Find the tab
				var tabContents = $( tabGroup ).next( '.tab-content' ).find( '.tab-pane' );

				$.each( tabContents, function ( index, tabContent ) {
					// Find the id to move the element to
					var destinationId = $( tabContent ).attr( 'id' ).replace ( /^/, '#collapse-' );

					// Convert tab to panel and move to destination
					$( tabContent )
						.removeClass( 'tab-pane' )
						.addClass( 'panel-body fw-previous-tab-pane' )
						.appendTo( $( destinationId ) );

				} );

			} );

		};

		fakewaffle.panelToTab = function () {

			var panelGroups = $( '.panel-group.responsive' );

			$.each( panelGroups, function ( index, panelGroup ) {

				var destinationId = $( panelGroup ).attr( 'id' ).replace( 'collapse-', '#' );
				var destination   = $( destinationId ).next( '.tab-content' )[ 0 ];

				// Find the panel contents
				var panelContents = $( panelGroup ).find( '.panel-body.fw-previous-tab-pane' );

				// Convert to tab and move to destination
				panelContents
					.removeClass( 'panel-body fw-previous-tab-pane' )
					.addClass( 'tab-pane' )
					.appendTo( $( destination ) );

			} );

		};

		fakewaffle.bindTabToCollapse = function () {

			var tabs     = $( '.nav-tabs.responsive' ).find( 'li a' );
			var collapse = $( '.panel-group.responsive' ).find( '.panel-collapse' );

			// Toggle the panels when the associated tab is toggled
			tabs.on( 'shown.bs.tab', function ( e ) {

				if (fakewaffle.currentPosition === 'tabs') {
					var $current  = $( e.currentTarget.hash.replace( /#/, '#collapse-' ) );
					$current.collapse( 'show' );

					if ( e.relatedTarget ) {
						var $previous = $( e.relatedTarget.hash.replace( /#/, '#collapse-' ) );
						$previous.collapse( 'hide' );
					}
				}

			} );

			// Toggle the tab when the associated panel is toggled
			collapse.on( 'shown.bs.collapse', function ( e ) {

				if (fakewaffle.currentPosition === 'panel') {
					// Activate current tabs
					var current = $( e.target ).context.id.replace( /collapse-/g, '#' );
					$( 'a[href="' + current + '"]' ).tab( 'show' );

					// Update the content with active
					var panelGroup = $( e.currentTarget ).closest( '.panel-group.responsive' );
					$( panelGroup ).find( '.panel-body' ).removeClass( 'active' );
					$( e.currentTarget ).find( '.panel-body' ).addClass( 'active' );
				}

			} );
		};

		$( window ).resize( function () {
			fakewaffle.checkResize();
		} );

		return fakewaffle;
	}( window.jQuery, fakewaffle || { } ) );

	</script>
</apex:component>